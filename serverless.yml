service: ping

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  environment:
    SERVER_URL: ${file(./env/${self:provider.stage}.json):serverUrl}
    PG_USER: ${env:PG_USER}
    PG_PW: ${env:PG_PW}
    PG_DB: ${env:PG_DB}
    PG_ENDPOINT:
      Fn::GetAtt:
        - pgDB
        - Endpoint.Address

functions:
  auth:
    handler: lambdas/auth.handler
    cors: true

  pingServices:
    handler: lambdas/pingServices.handler
    events:
      - schedule: rate(1 minute)

  getPings:
    handler: lambdas/getPings.handler
    events:
      - http:
          path: getPings
          method: get
          authorizer: auth
          cors: true

  addEndpoint:
    handler: lambdas/addEndpoint.handler
    events:
      - http:
          path: addEndpoint
          method: post
          authorizer: auth
          cors: true

  getEndpoints:
    handler: lambdas/getEndpoints.handler
    events:
      - http:
          path: getEndpoints
          method: get
          authorizer: auth
          cors: true

  deleteEndpoint:
    handler: lambdas/deleteEndpoint.handler
    events:
      - http:
          path: deleteEndpoint
          method: delete
          authorizer: auth
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    pgSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
    pgDB:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBName: ${env:PG_DB}
        AllocatedStorage: 5
        DBInstanceClass: "db.t2.micro"
        Engine: "postgres"
        EngineVersion: "10.4"
        MasterUsername: ${env:PG_USER}
        MasterUserPassword: ${env:PG_PW}
        VPCSecurityGroups:
        - Fn::GetAtt:
          - pgSecurityGroup
          - GroupId
      DeletionPolicy: "Snapshot"

plugins:
  - serverless-offline
